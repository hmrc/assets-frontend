{
  "name": "promises-a",
  "version": "2.3.0",
  "description": "A bare bones implementation of Promises/A intended to pass https://github.com/domenic/promise-tests while being as small as possible",
  "main": "index.js",
  "scripts": {
    "test": "promise-tests all adapter.js",
    "minify": "uglifyjs index.js > index.min.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ForbesLindesay/promises-a.git"
  },
  "keywords": [
    "promises",
    "promise"
  ],
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "devDependencies": {
    "promise-tests": "*",
    "uglify-js": "*"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/ForbesLindesay/promises-a.png)](http://travis-ci.org/ForbesLindesay/promises-a)\r\n# promises-a\r\n\r\n  A bare bones implementation of Promises/A intended to pass all [promise-tests](https://github.com/domenic/promise-tests) while being as small as possible.\r\n\r\n  This is intended to serve as a base for you to build your own promises libraries, which would typically be expected to provide all sorts of useful helpers. Promises created by this library (or any library based off of this) should be compatable with such helpers, but helpers won't ever be included in this library.\r\n\r\n## Installation\r\n\r\n  Client:\r\n\r\n    $ component install ForbesLindesay/promises-a\r\n\r\n  Server:\r\n\r\n    $ npm install promises-a\r\n\r\n  Alternatively you can download it from the [downloads area](https://github.com/ForbesLindesay/promises-a/downloads) and reference it with a script tag:\r\n\r\n```html\r\n<script src=\"promises.min.js\"></script>\r\n```\r\n\r\n  then just refer to it as the global: `promises`\r\n\r\n## Usage\r\n\r\n  Here is an example of how to create a promises function to wrap a low level api, and provide a timeout\r\n\r\n```javascript\r\nvar promise = require('promises-a');\r\nfunction loadDataAsync(id, timeout) {\r\n  timeout = timeout == null ? 500 : timeout;\r\n  var def = promise();\r\n\r\n  callLowLevelAPI(id, function (err, res) {\r\n    if (err) return def.reject(err);\r\n    def.resolve(res);\r\n  });\r\n\r\n  if (timeout) {\r\n    setTimeout(function () {\r\n      def.reject(new Error('Operation Timed Out (' + timeout + 'ms)'));\r\n    }, timeout);\r\n  }\r\n\r\n  return def.promise;\r\n}\r\n```\r\n\r\n  Because the promise can only be resolved once, the rejection will be ignored if the operation is successful within the timeout. A timeout of 0 will also be treated as infinite.\r\n\r\n## API\r\n\r\n### promise()\r\n\r\n  Return a new `deferred`.\r\n\r\n### deferred\r\n\r\n#### deferred#promise\r\n\r\n  Get the promise represented by the deferred. This is just an object with a function called then.\r\n\r\n#### deferred#fulfill(value)\r\n\r\n  Put the promise in a resolved state and fulfill it with the value provided.\r\n\r\n#### deferred#reject(error)\r\n\r\n  Put the promise in a resolved state and reject it with the error provided.\r\n\r\n### promise\r\n\r\n#### promise#then(callback, errback)\r\n\r\n  You can call then with tow optional args. The callback is called when the promise is fulfilled, the errback is called when the promise is rejected. Then also returns a fresh promise which is set to the result of the callback or errback.  If you want to forward a rejection either make errback `null`, or re-throw the error in errback.\r\n\r\n  If you return a promise from callback or errback it will be resolved before being set as the result of the promise.\r\n\r\n#### promise#done(callback, errback)\r\n\r\n  Equivalent to calling then, except you don't get a new promise out and exceptions are never swallowed.\r\n\r\n## License\r\n\r\n  MIT\r\n\r\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/ForbesLindesay/promises-a/issues"
  },
  "homepage": "https://github.com/ForbesLindesay/promises-a",
  "_id": "promises-a@2.3.0",
  "dist": {
    "shasum": "ae74cd5393ff3093c136cfe53517276242d63039"
  },
  "_from": "promises-a@~2",
  "_resolved": "https://registry.npmjs.org/promises-a/-/promises-a-2.3.0.tgz"
}
