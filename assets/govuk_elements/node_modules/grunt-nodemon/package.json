{
  "name": "grunt-nodemon",
  "version": "0.2.1",
  "description": "Grunt task to run a nodemon monitor of your node.js server",
  "main": "test/fixtures/server.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ChrisWren/grunt-nodemon.git"
  },
  "keywords": [
    "gruntplugin",
    "nodemon",
    "server"
  ],
  "author": {
    "name": "Chris Wren"
  },
  "license": "MIT",
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-simple-mocha": "~0.4.0",
    "should": "~1.2.2",
    "grunt-release": "~0.5.1",
    "grunt-contrib-jshint": "~0.6.2",
    "matchdep": "~0.1.2",
    "grunt-mdlint": "0.0.0"
  },
  "dependencies": {
    "nodemon": "~1.0.9"
  },
  "readme": "# grunt-nodemon\n\n> Run [nodemon](https://github.com/remy/nodemon) as a grunt task for easy configuration and integration with the rest of your workflow\n\n[![NPM version](https://badge.fury.io/js/grunt-nodemon.png)](http://badge.fury.io/js/grunt-nodemon) [![Dependency Status](https://david-dm.org/ChrisWren/grunt-nodemon.png)](https://david-dm.org/ChrisWren/grunt-nodemon) [![Travis Status](https://travis-ci.org/ChrisWren/grunt-nodemon.png)](https://travis-ci.org/ChrisWren/grunt-nodemon)\n\n## Getting Started\nIf you haven't used grunt before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a gruntfile as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n```shell\nnpm install grunt-nodemon --save-dev\n```\n\nThen add this line to your project's `Gruntfile.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-nodemon');\n```\n\n## Documentation\n\n### Minimal Usage\nThe minimal usage of grunt-nodemon runs with a `script` specified:\n\n```js\nnodemon: {\n  dev: {\n    script: 'index.js'\n  }\n}\n```\n\n### Usage with all available options set\n\n```js\nnodemon: {\n  dev: {\n    script: 'index.js',\n    options: {\n      args: ['dev'],\n      nodeArgs: ['--debug'],\n      callback: function (nodemon) {\n        nodemon.on('log', function (event) {\n          console.log(event.colour);\n        });\n      },\n      env: {\n        PORT: '8181'\n      },\n      cwd: __dirname,\n      ignore: ['node_modules/**'],\n      ext: 'js,coffee',\n      watch: ['server'],\n      delay: 1,\n      legacyWatch: true\n    }\n  },\n  exec: {\n    options: {\n      exec: 'less'\n    }\n  }\n}\n```\n\n### Advanced Usage\n\nA common use case is to run `nodemon` with other tasks concurrently. It is also common to open a browser tab when starting a server, and reload that tab when the server code changes. These workflows can be achieved with the following config, which uses a custom [`options.callback`](#callback) function, and [grunt-concurrent](https://github.com/sindresorhus/grunt-concurrent) to run nodemon, [node-inspector](https://github.com/ChrisWren/grunt-node-inspector), and [watch](https://github.com/gruntjs/grunt-contrib-watch) in a single terminal tab:\n\n```js\nconcurrent: {\n  dev: {\n    tasks: ['nodemon', 'node-inspector', 'watch'],\n    options: {\n      logConcurrentOutput: true\n    }\n  }\n},\nnodemon: {\n  dev: {\n    script: 'index.js',\n    options: {\n      nodeArgs: ['--debug'],\n      env: {\n        PORT: '5455'\n      },\n      // omit this property if you aren't serving HTML files and \n      // don't want to open a browser tab on start\n      callback: function (nodemon) {\n        nodemon.on('log', function (event) {\n          console.log(event.colour);\n        });\n        \n        // opens browser on initial server start\n        nodemon.on('config:update', function () {\n          // Delay before server listens on port\n          setTimeout(function() {\n            require('open')('http://localhost:5455');\n          }, 1000);\n        });\n\n        // refreshes browser when server reboots\n        nodemon.on('restart', function () {\n          // Delay before server listens on port\n          setTimeout(function() {\n            require('fs').writeFileSync('.rebooted', 'rebooted');\n          }, 1000);\n        });\n      }\n    }\n  }\n},\nwatch: {\n  server: {\n    files: ['.rebooted'],\n    options: {\n      livereload: true\n    }\n  } \n}\n```\n\n*Note that using the callback config above assumes you have `open` installed and are injecting a LiveReload script into your HTML file(s). You can use [grunt-inject](https://github.com/ChrisWren/grunt-inject) to inject the LiveReload script.*\n\n### Required property\n\n#### script\nType: `String`\n\nScript that nodemon runs and restarts when changes are detected.\n\n### Options\n\n#### args\nType: `Array` of `Strings`\n\nList of arguments to be passed to your script.\n\n#### nodeArgs\nType: `Array` of `Strings`\n\nList of arguments to be passed to node. The most common argument is `--debug` or `--debug-brk` to start a debugging server.\n\n#### callback\nType:  `Function`\nDefault:\n\n```js\nfunction(nodemon) {\n  // By default the nodemon output is logged\n  nodemon.on('log', function(event) {\n    console.log(event.colour);\n  });\n};\n```\n\nCallback which receives the `nodemon` object. This can be used to respond to changes in a running app, and then do cool things like LiveReload a web browser when the app restarts. See the [nodemon docs](https://github.com/remy/nodemon/blob/master/doc/events.md#states) for the full list of events you can tap into.\n\n#### ignore\nType: `Array` of `String globs` Default: `['node_modules/**']`\n\nList of ignored files specified by a glob pattern. [Here](https://github.com/remy/nodemon#ignoring-files) is an explanation of how to use the patterns to ignore files.\n\n#### ext\nType: `String` Default: `'js'`\n\nString with comma separated file extensions to watch. By default, nodemon watches `.js` files.\n\n#### watch\nType: `Array` of `Strings` Default: `['.']`\n\nList of folders to watch for changes if you don't want to watch the root folder and its subdirectories.\n\n#### delay\nType: `Number` Default: `1`\n\nDelay the restart of nodemon by a number of seconds when compiling a large amount of files so that the app doesn't needlessly restart after each file is changed.\n\n#### legacyWatch\nType: `Boolean` Default: `false`\n\nIf you wish to force nodemon to start with the legacy watch method. See <https://github.com/remy/nodemon#help-my-changes-arent-being-detected> for more details.\n\n#### cwd\nType: `String`\n\nThe current working directory to run your script from.\n\n#### env\nType: `Object`\n\nHash of environment variables to pass to your script.\n\n#### exec\nType: `String`\n\nYou can use nodemon to execute a command outside of node. Use this option to specify a command as a string with the argument being the script parameter above. You can read more on exec [here](https://github.com/remy/nodemon#running-non-node-scripts).\n\n# Changelog\n\n**0.2.0** - Updated to nodemon 1.0, added new [`callback`](#callback) option.\n\n**Breaking changes:**\n\n- `options.file` is now `script` and is a required property. Some properties were changed to match nodemon: `ignoredFiles` -> `ignore`, `watchedFolders` -> `watch`, `delayTime` -> `delay`, `watchedExtensions` -> `ext`(now a string) to match nodemon.\n\n**0.1.2** - `nodemon` can now be listed as a dependency in the package.json and grunt-nodemon will resolve the nodemon.js file's location correctly.\n\n**0.1.1** - Added `legacyWatch` option thanks to [@jonursenbach](https://github.com/jonursenbach).\n\n**0.1.0** - Removed `debug` and `debugBrk` options as they are encapsulated by the `nodeArgs` option.\n\n**Breaking changes:**\n\n- Configs with the `debug` or `debugBrk` options will no longer work as expected. They simply need to be added to `nodeArgs`.\n\n**0.0.10** - Added `nodeArgs` option thanks to [@eugeneiiim](https://github.com/eugeneiiim).\n\n**0.0.9** - Fixed bug when using `cwd` with `ignoredFiles`.\n\n**0.0.8** - Added error logging for incorrectly installed `nodemon`.\n\n**0.0.7** - Added `debugBreak` option thanks to [@bchu](https://github.com/bchu).\n\n**0.0.6** - Added `env` option.\n\n**0.0.5** - Added `cwd` option.\n\n**0.0.4** - Added `nodemon` as a proper dependency.\n\n**0.0.3** - Uses local version of `nodemon` for convenience and versioning.\n\n**0.0.2** - Removes `.nodemonignore` if it was previously generated and then the `ignoredFiles` option is removed.\n\n**0.0.1** - Added warning if `nodemon` isn't installed as a global module.\n\n**0.0.0** - Initial release\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ChrisWren/grunt-nodemon/issues"
  },
  "homepage": "https://github.com/ChrisWren/grunt-nodemon",
  "_id": "grunt-nodemon@0.2.1",
  "dist": {
    "shasum": "1b8f24895292097dc814d1603a97e8fec1c924f3"
  },
  "_from": "grunt-nodemon@0.2.1",
  "_resolved": "https://registry.npmjs.org/grunt-nodemon/-/grunt-nodemon-0.2.1.tgz"
}
